/*
 * stm32f407xx_usart.h
 *
 *  Created on: Apr 10, 2025
 *      Author: nhduong
 */

#ifndef INC_STM32F407XX_USART_H_
#define INC_STM32F407XX_USART_H_

#include "stm32f407xx.h"
/**
  * @brief USART Init Structure definition
  */
typedef struct
{
  uint32_t BaudRate;                  /*!< This member configures the UART communication baud rate.
                                           This parameter can be a value of @ref UART_Baud_Rate 				*/

  uint8_t WordLength;                /*!< Specifies the number of data bits transmitted or received in a frame.
                                           This parameter can be a value of @ref UART_Word_Length 				*/

  uint8_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
                                           This parameter can be a value of @ref UART_Stop_Bits 				*/

  uint8_t Parity;                    /*!< Specifies the parity mode.
                                           This parameter can be a value of @ref UART_Parity
                                           @note When parity is enabled, the computed parity is inserted
                                                 at the MSB position of the transmitted data (9th bit when
                                                 the word length is set to 9 data bits; 8th bit when the
                                                 word length is set to 8 data bits). 							*/

  uint8_t Mode;                      /*!< Specifies whether the Receive or Transmit mode is enabled or disabled.
                                           This parameter can be a value of @ref UART_Mode */

  uint8_t HwFlowCtl;                 /*!< Specifies whether the hardware flow control mode is enabled or disabled.
                                           This parameter can be a value of @ref UART_Hardware_Flow_Control 	*/

  uint8_t OverSampling;              /*!< Specifies whether the Over sampling 8 is enabled or disabled, to achieve higher speed (up to fPCLK/8).
                                           This parameter can be a value of @ref UART_Over_Sampling 			*/

} USART_InitTypeDef;

/**
  * @brief  USART handle Structure definition
  */
typedef struct
{
	USART_TypeDef 		*pUSARTx;		/*!< USART register base address			*/

	USART_InitTypeDef	Init;			/*!< USART communication parameters			*/

	uint8_t				*pTxBuffPtr;	/*!< Pointer to USART Tx transfer buffer	*/

	uint32_t			TxLen;			/*!< USART Tx transfer length				*/

	uint8_t				*pRxBuffPtr;	/*!< Pointer to USART Rx transfer buffer	*/

	uint32_t			RxLen;			/*!< USART Rx transfer length				*/

	uint8_t				TxState;		/*!< USART Tx transfer state				*/

	uint8_t				RxState;		/*!< USART Rx transfer state				*/

}USART_HandleTypeDef;


/**
  * @def USART_Mode USART Transfer Mode
  */
#define USART_MODE_TX                        0
#define USART_MODE_RX                        1
#define USART_MODE_TX_RX                     2

/**
  * @def USART_Baud_Rate USART Baud Rate
  */
#define USART_BAUDRAT_1200					1200
#define USART_BAUDRAT_2400					400
#define USART_BAUDRAT_9600					9600
#define USART_BAUDRAT_19200 				19200
#define USART_BAUDRAT_38400 				38400
#define USART_BAUDRAT_57600 				57600
#define USART_BAUDRAT_115200 				115200
#define USART_BAUDRAT_230400 				230400
#define USART_BAUDRAT_460800 				460800
#define USART_BAUDRAT_921600 				921600
#define USART_BAUDRAT_2M 					2000000
#define USART_BAUDRAT_3M 					3000000

/**
  * @def USART_Parity USART Parity
  */
#define USART_PARITY_NONE   		0
#define USART_PARITY_EVEN        	1
#define USART_PARITY_ODD         	2

/**
  * @def USART_Word_Length USART Word Length
  */
#define USART_WORDLENGTH_8B                  0
#define USART_WORDLENGTH_9B                  1

/**
  * @def USART_Stop_Bits USART Number of Stop Bits
  */
#define USART_STOPBITS_1     0
#define USART_STOPBITS_0_5   1
#define USART_STOPBITS_2     2
#define USART_STOPBITS_1_5   3

/**
  *	@def USART_Hardware_Flow_Control USART Hardware Flow Control
  */
#define USART_HWCONTROL_NONE                  0
#define USART_HWCONTROL_CTS                   1
#define USART_HWCONTROL_RTS                   2
#define USART_HWCONTROL_RTS_CTS               3

/**
  * @def USART_Over_Sampling USART Over Sampling
  */
#define USART_OVERSAMPLING_16                    0
#define USART_OVERSAMPLING_8                     1

/**
  * @def USART_Flags   USART FLags
  */
#define USART_FLAG_CTS                       (1 << USART_SR_CTS)
#define USART_FLAG_LBD                       (1 << USART_SR_LBD)
#define USART_FLAG_TXE                       (1 << USART_SR_TXE)
#define USART_FLAG_TC                        (1 << USART_SR_TC)
#define USART_FLAG_RXNE                      (1 << USART_SR_RXNE)
#define USART_FLAG_IDLE                      (1 << USART_SR_IDLE)
#define USART_FLAG_ORE                       (1 << USART_SR_ORE)
#define USART_FLAG_NE                        (1 << USART_SR_NE)
#define USART_FLAG_FE                        (1 << USART_SR_FE)
#define USART_FLAG_PE                        (1 << USART_SR_PE)

/**
  * @def USART_States   USART States
  */
#define USART_STATE_READY 			0
#define USART_STATE_BUSY_RX 		1
#define USART_STATE_BUSY_TX 		2


/**
  * @def USART_Application   USART Application
  */
#define 	USART_EVENT_TX_COMPLETE   			0
#define		USART_EVENT_RX_COMPLETE   			1
#define		USART_EVENT_IDLE      				2
#define		USART_EVENT_CTS       				3
#define		USART_EVENT_PE        				4

/**
  * @def USART_Error   USART Error
  */
#define		USART_ERROR_FE     					5
#define		USART_ERROR_NE    	 				6
#define		USART_ERROR_ORE    					7

/******************************************************************************************
 *								APIs supported by this driver
 *		 For more information about the APIs check the function definitions
 ******************************************************************************************/


/*
 * Peripheral Clock setup
 */
void USART_PeriClockControl(USART_TypeDef *pUSARTx, uint8_t State);

/*
 * Init and De-init
 */
void USART_Init(USART_HandleTypeDef *husart);
void USART_DeInit(USART_HandleTypeDef *husart);

/*
 * Data Transmit and Receive
 */
void USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxBuffer, uint32_t Len);
void USART_Receive(USART_HandleTypeDef *husart,uint8_t *pRxBuffer, uint32_t Len);
uint8_t USART_Transmit_IT(USART_HandleTypeDef *husart,uint8_t *pTxBuffer, uint32_t Len);
uint8_t USART_Receive_IT(USART_HandleTypeDef *husart,uint8_t *pRxBuffer, uint32_t Len);

/*
 * IRQ Configuration and ISR handling
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t State);
void USART_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority);
void USART_IRQHandler(USART_HandleTypeDef *husart);

/*
 * Other Peripheral Control APIs
 */

uint8_t USART_GetFlagStatus(USART_TypeDef *pUSARTx, uint8_t FlagName);
void USART_ClearFlag(USART_TypeDef *pUSARTx, uint16_t FlagName);
void USART_PeripheralControl(USART_TypeDef *pUSARTx, uint8_t State);
void USART_SetBaudRate(USART_TypeDef *pUSARTx, uint32_t BaudRate);


/*
 * Application Callbacks
 */
void USART_ApplicationEventCallback(USART_HandleTypeDef *husart,uint8_t ApEv);





#endif /* INC_STM32F407XX_USART_H_ */
