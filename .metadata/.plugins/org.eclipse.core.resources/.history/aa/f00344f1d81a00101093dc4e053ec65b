/*
 * stm32f407xx_spi.h
 *
 *  Created on: Apr 10, 2025
 *      Author: nhduong
 */

#ifndef INC_STM32F407XX_SPI_H_
#define INC_STM32F407XX_SPI_H_

#include "stm32f407xx.h"

/*
 * @brief SPI Configuration Structure
 */
typedef struct
{
	uint8_t Mode;				/*!< Specifies the SPI operating mode.
									This parameter can be a value of @ref SPI_Mode						*/

	uint8_t Direction;			/*!< Specifies the SPI bidirection mode state.
								 	 This parameter can be a value of @ref SPI_Direction				*/

	uint8_t DataSize;			/*!< Specifies the SPI data size.
								 	 This paramter can be a value of @ref SPI_Data_Size					*/

	uint8_t CLKPolarity;		/*!< Specifies the serial clock steady state.
								 	 This parameter can be a value of @ref SPI_Clock_Polarity			*/

	uint8_t CLKPhase;			/*!< Specifies the clock active edge for the bit capture.
								 	 This parameter can be a value @ref SPI_Clock_Phase					*/

	uint8_t NSS;				/*!< Specifies whether the NSS signal is managed by
								 	 hardware (NSS pin) or by software using the SSI bit.
								 	 This parameter can be a value of @ref SPI_Slave_Select_management	*/

	uint8_t BaudRatePrescaler;	/*!< Specifies the Baud Rate prescaler value which will be
									 used to configure the transmit and receive SCK clock.
									 This parameter can be a value of @ref SPI_BaudRate_Prescaler		*/

}SPI_InitTypeDef;

/*
 * @brief SPI handle Structure definition
 */
typedef struct
{
	SPI_TypeDef				*pSPIx;		/*< SPI register base address			*/

	SPI_InitTypeDef			Init;		/*!< SPI communication parameters		*/

	uint8_t 				*pTxBuff;	/*!< Pointer to SPI Tx transfer Buffer	*/

	uint32_t				TxLen;		/*!< SPI Tx Transfer length				*/

	uint8_t 				*pRxBuff;	/*!< Pointer to SPI Rx transfter Buffer	*/

	uint32_t				RxLen;		/*!< SPI Rx Transfer length				*/

	uint8_t					TxState;	/*!< SPI Tx Transfer state				*/

	uint8_t 				RxState;	/*!< SPI Rx Transfer state				*/

}SPI_HandleTypeDef;

/*
 * @brief SPI State definition
 */
#define	SPI_STATE_READY = 0x00;		/*!< Peripheral Initialized and ready for use		*/
#define SPI_STATE_BUSY_TX = 0x01, 	/*!< Data Transmission is ongoing					*/
#define SPI_STATE_BUSY_RX = 0x02;	/*!< Data Reception is ongoing						*/

/**
  * @brief  SPI Callback ID definition
  */
#define SPI_EVENT_TX_COMPLETE            		= 1,    /*!< SPI Tx Completed          	*/
#define SPI_EVENT_RX_COMPLETE           		= 2,    /*!< SPI Rx Completed          	*/
#define SPI_ERROR_OVR                   		= 3,    /*!< SPI OVR Error   			*/
#define SPI_ERROR_CRC                   		= 4,    /*!< SPI CRC Error   			*/

/**
  * @def SPI_Mode SPI Mode
  */
#define SPI_MODE_SLAVE                  		0
#define SPI_MODE_MASTER                		 	1

/**
  * @def SPI_Direction SPI Direction Mode
  */
#define SPI_DIRECTION_FULLDUPLEX                1
#define SPI_DIRECTION_HALFDUPLEX                2
#define SPI_DIRECTION_SIMPEX_RXONLY             3

/**
  * @def SPI_Data_Size SPI Data Size
  */
#define SPI_DATASIZE_8BIT                       0
#define SPI_DATASIZE_16BIT                      1

/**
  * @def SPI_Clock_Polarity SPI Clock Polarity
  */
#define SPI_POLARITY_LOW                        0
#define SPI_POLARITY_HIGH                       1

/**
  * @def SPI_Clock_Phase SPI Clock Phase
  */
#define SPI_PHASE_1EDGE                         0
#define SPI_PHASE_2EDGE                         1

/**
  * @def SPI_Slave_Select_management SPI Slave Select Management
  */
#define SPI_NSS_HARD                            0
#define SPI_NSS_SOFT                            1

/**
  * @def SPI_BaudRate_Prescaler SPI BaudRate Prescaler
  */
#define SPI_BAUDRATEPRESCALER_2                     0
#define SPI_BAUDRATEPRESCALER_4                     1
#define SPI_BAUDRATEPRESCALER_8                     2
#define SPI_BAUDRATEPRESCALER_16                    3
#define SPI_BAUDRATEPRESCALER_32                    4
#define SPI_BAUDRATEPRESCALER_64                    5
#define SPI_BAUDRATEPRESCALER_128                   6
#define SPI_BAUDRATEPRESCALER_256                   7

/**
  * @def SPI_Flags_definition SPI Flags Definition
  */
#define SPI_FLAG_RXNE                   (1 << SPI_SR_RXNE)   /* SPI status flag: Rx buffer not empty flag       */
#define SPI_FLAG_TXE                    (1 << SPI_SR_TXE)    /* SPI status flag: Tx buffer empty flag           */
#define SPI_FLAG_BSY                    (1 << SPI_SR_BSY)    /* SPI status flag: Busy flag                      */
#define SPI_FLAG_CRCERR                 (1 << SPI_SR_CRCERR) /* SPI Error flag: CRC error flag                  */
#define SPI_FLAG_MODF                   (1 << SPI_SR_MODF)   /* SPI Error flag: Mode fault flag                 */
#define SPI_FLAG_OVR                    (1 << SPI_SR_OVR)    /* SPI Error flag: Overrun flag                    */
#define SPI_FLAG_FRE                    (1 << SPI_SR_FRE)    /* SPI Error flag: TI mode frame format error flag */

/** @brief  Check whether the specified SPI flag is set or not.
  * @param  __HANDLE__ specifies the SPI Handle.
  *         This parameter can be SPI where x: 1, 2, or 3 to select the SPI peripheral.
  * @param  __FLAG__ specifies the flag to check.
  *         This parameter can be one of the following values:
  *            @arg SPI_FLAG_RXNE: Receive buffer not empty flag
  *            @arg SPI_FLAG_TXE: Transmit buffer empty flag
  *            @arg SPI_FLAG_CRCERR: CRC error flag
  *            @arg SPI_FLAG_MODF: Mode fault flag
  *            @arg SPI_FLAG_OVR: Overrun flag
  *            @arg SPI_FLAG_BSY: Busy flag
  *            @arg SPI_FLAG_FRE: Frame format error flag
  * @retval The new state of __FLAG__ (TRUE or FALSE).
  */
#define __HAL_SPI_GET_FLAG(__HANDLE__, __FLAG__) ((((__HANDLE__)->Instance->SR) & (__FLAG__)) == (__FLAG__))






#endif /* INC_STM32F407XX_SPI_H_ */
