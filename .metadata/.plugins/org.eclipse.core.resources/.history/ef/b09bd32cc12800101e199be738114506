/*
 * stm32f407xx_usart.c
 *
 *  Created on: May 3, 2025
 *      Author: nhduong
 */

#include <stm32f407xx_usart.h>

/**
  * @brief  Enable or disable the clock for the specified USART peripheral.
  *
  * @param  pUSARTx Pointer to the USART peripheral base address.
  *
  * @param  State ENABLE to enable clock, DISABLE to disable clock.
  *
  * @retval None
  */
void USART_PeriClockControl(USART_TypeDef *pUSARTx, uint8_t State)
{
  if (State == ENABLE)
  {
    if (pUSARTx == USART1)
    {
      USART1_CLK_EN();
    }else if (pUSARTx == USART2)
    {
      USART2_CLK_EN();
    }else if (pUSARTx == USART3)
    {
      USART3_CLK_EN();
    }else if (pUSARTx == UART4)
    {
      UART4_CLK_EN();
    }else if (pUSARTx == UART5)
    {
      UART5_CLK_EN();
    }else {
      USART6_CLK_EN();
    }
  }else {
    if (pUSARTx == USART1)
    {
      USART1_CLK_DIS();
    }else if (pUSARTx == USART2)
    {
      USART2_CLK_DIS();
    }else if (pUSARTx == USART3)
    {
      USART3_CLK_DIS();
    }else if (pUSARTx == UART4)
    {
      UART4_CLK_DIS();
    }else if (pUSARTx == UART5)
    {
      UART5_CLK_DIS();
    }else {
      USART6_CLK_DIS();
    }
  }
}

/**
  * @brief  Initializes the UART mode according to the specified parameters in
  *         the UART_InitTypeDef and create the associated handle.
  *
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  *
  * @retval None
  */
void USART_Init(USART_HandleTypeDef *husart)
{
	uint32_t tempreg = 0;

	/******************************** Configuration of CR1******************************************/

	// Enable clock
	USART_PeriClockControl(husart->pUSARTx, ENABLE);

	// Enable USART Tx and Rx according to the USART_Mode configuration item
	if (husart->Init.Mode == USART_MODE_TX)
	{
		// Enable Tx mode
		tempreg |=  (1 << USART_CR1_TE);
	}else if (husart->Init.Mode == USART_MODE_RX)
	{
		// Enable Rx mode
		tempreg |= (1 << USART_CR1_RE);
	}else {
		// enable Tx and Rx
		tempreg |= (1 << USART_CR1_TE) | (1 << USART_CR1_RE);
	}

	// Configure word length
	tempreg |= husart->Init.WordLength << USART_CR1_M;

	// Configurate of parity control
	if (husart->Init.Parity == USART_PARITY_EVEN)
	{
		// enable parity control
		tempreg |= (1 << USART_CR1_PCE);

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control
	}else if (husart->Init.Parity == USART_PARITY_ODD)
	{
		// enable parity control
		tempreg |= (1 << USART_CR1_PCE);

		//Implement the code to enable ODD parity
		tempreg |= (1 << USART_CR1_PS);
	}

	// Program the CR1 register
	husart->pUSARTx->CR1 = tempreg;

	/******************************** Configuration of CR2******************************************/
	tempreg = 0;

	// Configure the number of stop bits
	tempreg |= husart->Init.StopBits << USART_CR2_STOP;

	// prgoram CR2 register
	husart->pUSARTx->CR2 = tempreg;

	/******************************** Configuration of CR3******************************************/
	tempreg = 0;

	// Configurate of USART hardware flow control
	if (husart->Init.HwFlowCtl == USART_HWCONTROL_CTS)
	{
		// Enable CTS flow control
		tempreg |= (1 << USART_CR3_CTSE);
	}else if (husart->Init.HwFlowCtl == USART_HWCONTROL_RTS)
	{
		// Enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
	}else if (husart->Init.HwFlowCtl == USART_HWCONTROL_RTS_CTS)
	{
		// Enable CTS and RTS
		tempreg |= (1 << USART_CR3_CTSE) | (1 << USART_CR3_RTSE);
	}

	 // program CR3 register
	husart->pUSARTx->CR3 = tempreg;

	/******************************** Configuration of BRR(Baudrate register)******************************************/

}
void USART_DeInit(USART_HandleTypeDef *husart);

/*
 * Data Transmit and Receive
 */
void USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxBuffer, uint32_t Len);
void USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxBuffer, uint32_t Len);
uint8_t USART_Transmit_IT(USART_HandleTypeDef *husart, uint8_t *pTxBuffer, uint32_t Len);
uint8_t USART_Receive_IT(USART_HandleTypeDef *husart, uint8_t *pRxBuffer, uint32_t Len);

/*
 * IRQ Configuration and ISR handling
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t State);
void USART_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority);
void USART_IRQHandler(USART_HandleTypeDef *husart);

/*
 * Other Peripheral Control APIs
 */

uint8_t USART_GetFlagStatus(USART_TypeDef *pUSARTx, uint8_t FlagName);
void USART_ClearFlag(USART_TypeDef *pUSARTx, uint16_t FlagName);
void USART_PeripheralControl(USART_TypeDef *pUSARTx, uint8_t State);
void USART_SetBaudRate(USART_TypeDef *pUSARTx, uint32_t BaudRate);


/*
 * Application Callbacks
 */
void USART_ApplicationEventCallback(USART_HandleTypeDef *husart, uint8_t AppEvent);
