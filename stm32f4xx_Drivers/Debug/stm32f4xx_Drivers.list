
stm32f4xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008e4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a6c  08000a74  00001a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a6c  08000a6c  00001a74  2**0
                  CONTENTS
  4 .ARM          00000000  08000a6c  08000a6c  00001a74  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a6c  08000a74  00001a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a6c  08000a6c  00001a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a70  08000a70  00001a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001a74  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ab1  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002e5  00000000  00000000  00002555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00002840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008c  00000000  00000000  00002908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002626  00000000  00000000  00002994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001247  00000000  00000000  00004fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a410  00000000  00000000  00006201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010611  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000288  00000000  00000000  00010654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000108dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a54 	.word	0x08000a54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000a54 	.word	0x08000a54

080001c8 <GPIO_ClockControl>:
 * @param  State: ENABLE or DISABLE.
 *
 * @retval None
 */
void GPIO_ClockControl(GPIO_TypeDef *pGPIOx, uint8_t State)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
    if(State == ENABLE)
 80001d4:	78fb      	ldrb	r3, [r7, #3]
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d162      	bne.n	80002a0 <GPIO_ClockControl+0xd8>
    {
        if(pGPIOx == GPIOA) { GPIOA_CLK_EN(); }
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a64      	ldr	r2, [pc, #400]	@ (8000370 <GPIO_ClockControl+0x1a8>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d106      	bne.n	80001f0 <GPIO_ClockControl+0x28>
 80001e2:	4b64      	ldr	r3, [pc, #400]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e6:	4a63      	ldr	r2, [pc, #396]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6313      	str	r3, [r2, #48]	@ 0x30
        else if (pGPIOx == GPIOF) { GPIOF_CLK_DIS(); }
        else if (pGPIOx == GPIOG) { GPIOG_CLK_DIS(); }
        else if (pGPIOx == GPIOH) { GPIOH_CLK_DIS(); }
        else if (pGPIOx == GPIOI) { GPIOI_CLK_DIS(); }
    }
}
 80001ee:	e0b9      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOB) { GPIOB_CLK_EN(); }
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a61      	ldr	r2, [pc, #388]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d106      	bne.n	8000206 <GPIO_ClockControl+0x3e>
 80001f8:	4b5e      	ldr	r3, [pc, #376]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fc:	4a5d      	ldr	r2, [pc, #372]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 80001fe:	f043 0302 	orr.w	r3, r3, #2
 8000202:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000204:	e0ae      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOC) { GPIOC_CLK_EN(); }
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4a5c      	ldr	r2, [pc, #368]	@ (800037c <GPIO_ClockControl+0x1b4>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d106      	bne.n	800021c <GPIO_ClockControl+0x54>
 800020e:	4b59      	ldr	r3, [pc, #356]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000212:	4a58      	ldr	r2, [pc, #352]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000214:	f043 0304 	orr.w	r3, r3, #4
 8000218:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800021a:	e0a3      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOD) { GPIOD_CLK_EN(); }
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a58      	ldr	r2, [pc, #352]	@ (8000380 <GPIO_ClockControl+0x1b8>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d106      	bne.n	8000232 <GPIO_ClockControl+0x6a>
 8000224:	4b53      	ldr	r3, [pc, #332]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000228:	4a52      	ldr	r2, [pc, #328]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000230:	e098      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOE) { GPIOE_CLK_EN(); }
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a53      	ldr	r2, [pc, #332]	@ (8000384 <GPIO_ClockControl+0x1bc>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_ClockControl+0x80>
 800023a:	4b4e      	ldr	r3, [pc, #312]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023e:	4a4d      	ldr	r2, [pc, #308]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000240:	f043 0310 	orr.w	r3, r3, #16
 8000244:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000246:	e08d      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOF) { GPIOF_CLK_EN(); }
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a4f      	ldr	r2, [pc, #316]	@ (8000388 <GPIO_ClockControl+0x1c0>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d106      	bne.n	800025e <GPIO_ClockControl+0x96>
 8000250:	4b48      	ldr	r3, [pc, #288]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000254:	4a47      	ldr	r2, [pc, #284]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800025c:	e082      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOG) { GPIOG_CLK_EN(); }
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a4a      	ldr	r2, [pc, #296]	@ (800038c <GPIO_ClockControl+0x1c4>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d106      	bne.n	8000274 <GPIO_ClockControl+0xac>
 8000266:	4b43      	ldr	r3, [pc, #268]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800026a:	4a42      	ldr	r2, [pc, #264]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 800026c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000270:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000272:	e077      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOH) { GPIOH_CLK_EN(); }
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a46      	ldr	r2, [pc, #280]	@ (8000390 <GPIO_ClockControl+0x1c8>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d106      	bne.n	800028a <GPIO_ClockControl+0xc2>
 800027c:	4b3d      	ldr	r3, [pc, #244]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000280:	4a3c      	ldr	r2, [pc, #240]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000286:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000288:	e06c      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOI) { GPIOI_CLK_EN(); }
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a41      	ldr	r2, [pc, #260]	@ (8000394 <GPIO_ClockControl+0x1cc>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d168      	bne.n	8000364 <GPIO_ClockControl+0x19c>
 8000292:	4b38      	ldr	r3, [pc, #224]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000296:	4a37      	ldr	r2, [pc, #220]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800029c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800029e:	e061      	b.n	8000364 <GPIO_ClockControl+0x19c>
        if(pGPIOx == GPIOA) { GPIOA_CLK_DIS(); }
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a33      	ldr	r2, [pc, #204]	@ (8000370 <GPIO_ClockControl+0x1a8>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d106      	bne.n	80002b6 <GPIO_ClockControl+0xee>
 80002a8:	4b32      	ldr	r3, [pc, #200]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ac:	4a31      	ldr	r2, [pc, #196]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 80002ae:	f023 0301 	bic.w	r3, r3, #1
 80002b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002b4:	e056      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOB) { GPIOB_CLK_DIS(); }
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a2f      	ldr	r2, [pc, #188]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <GPIO_ClockControl+0x104>
 80002be:	4b2d      	ldr	r3, [pc, #180]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 80002c4:	f023 0302 	bic.w	r3, r3, #2
 80002c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ca:	e04b      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOC) { GPIOC_CLK_DIS(); }
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a2b      	ldr	r2, [pc, #172]	@ (800037c <GPIO_ClockControl+0x1b4>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d106      	bne.n	80002e2 <GPIO_ClockControl+0x11a>
 80002d4:	4b27      	ldr	r3, [pc, #156]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d8:	4a26      	ldr	r2, [pc, #152]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 80002da:	f023 0304 	bic.w	r3, r3, #4
 80002de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002e0:	e040      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOD) { GPIOD_CLK_DIS(); }
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a26      	ldr	r2, [pc, #152]	@ (8000380 <GPIO_ClockControl+0x1b8>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d106      	bne.n	80002f8 <GPIO_ClockControl+0x130>
 80002ea:	4b22      	ldr	r3, [pc, #136]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 80002ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ee:	4a21      	ldr	r2, [pc, #132]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 80002f0:	f023 0308 	bic.w	r3, r3, #8
 80002f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002f6:	e035      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOE) { GPIOE_CLK_DIS(); }
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a22      	ldr	r2, [pc, #136]	@ (8000384 <GPIO_ClockControl+0x1bc>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d106      	bne.n	800030e <GPIO_ClockControl+0x146>
 8000300:	4b1c      	ldr	r3, [pc, #112]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000304:	4a1b      	ldr	r2, [pc, #108]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000306:	f023 0310 	bic.w	r3, r3, #16
 800030a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800030c:	e02a      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOF) { GPIOF_CLK_DIS(); }
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a1d      	ldr	r2, [pc, #116]	@ (8000388 <GPIO_ClockControl+0x1c0>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d106      	bne.n	8000324 <GPIO_ClockControl+0x15c>
 8000316:	4b17      	ldr	r3, [pc, #92]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031a:	4a16      	ldr	r2, [pc, #88]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 800031c:	f023 0320 	bic.w	r3, r3, #32
 8000320:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000322:	e01f      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOG) { GPIOG_CLK_DIS(); }
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a19      	ldr	r2, [pc, #100]	@ (800038c <GPIO_ClockControl+0x1c4>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_ClockControl+0x172>
 800032c:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000330:	4a10      	ldr	r2, [pc, #64]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000336:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000338:	e014      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOH) { GPIOH_CLK_DIS(); }
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a14      	ldr	r2, [pc, #80]	@ (8000390 <GPIO_ClockControl+0x1c8>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_ClockControl+0x188>
 8000342:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000346:	4a0b      	ldr	r2, [pc, #44]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 8000348:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800034c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800034e:	e009      	b.n	8000364 <GPIO_ClockControl+0x19c>
        else if (pGPIOx == GPIOI) { GPIOI_CLK_DIS(); }
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a10      	ldr	r2, [pc, #64]	@ (8000394 <GPIO_ClockControl+0x1cc>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d105      	bne.n	8000364 <GPIO_ClockControl+0x19c>
 8000358:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035c:	4a05      	ldr	r2, [pc, #20]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 800035e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000362:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	40020000 	.word	0x40020000
 8000374:	40023800 	.word	0x40023800
 8000378:	40020400 	.word	0x40020400
 800037c:	40020800 	.word	0x40020800
 8000380:	40020c00 	.word	0x40020c00
 8000384:	40021000 	.word	0x40021000
 8000388:	40021400 	.word	0x40021400
 800038c:	40021800 	.word	0x40021800
 8000390:	40021c00 	.word	0x40021c00
 8000394:	40022000 	.word	0x40022000

08000398 <GPIO_Init>:
 *         the configuration information for the specified GPIO peripheral.
 *
 * @retval None
 */
void GPIO_Init(GPIO_HandleTypeDef *hGPIO)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	617b      	str	r3, [r7, #20]

	// Enable the GPIO clock for the specific GPIO port
	GPIO_ClockControl(hGPIO->pGPIOx, ENABLE);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2101      	movs	r1, #1
 80003aa:	4618      	mov	r0, r3
 80003ac:	f7ff ff0c 	bl	80001c8 <GPIO_ClockControl>

	// Step 1: Configure the mode of the GPIO pin
	if (hGPIO->Init.Mode <= GPIO_MODE_ANALOG)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	795b      	ldrb	r3, [r3, #5]
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	d820      	bhi.n	80003fa <GPIO_Init+0x62>
	{
		// the non interrupt mode
		tempreg = (hGPIO->Init.Mode << (2 * hGPIO->Init.Pin));
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	795b      	ldrb	r3, [r3, #5]
 80003bc:	461a      	mov	r2, r3
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	791b      	ldrb	r3, [r3, #4]
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	fa02 f303 	lsl.w	r3, r2, r3
 80003c8:	617b      	str	r3, [r7, #20]
		hGPIO->pGPIOx->MODER &= ~(0x3 << (2 * hGPIO->Init.Pin));
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	791b      	ldrb	r3, [r3, #4]
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	2103      	movs	r1, #3
 80003d8:	fa01 f303 	lsl.w	r3, r1, r3
 80003dc:	43db      	mvns	r3, r3
 80003de:	4619      	mov	r1, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	400a      	ands	r2, r1
 80003e6:	601a      	str	r2, [r3, #0]
		hGPIO->pGPIOx->MODER |= tempreg;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	6819      	ldr	r1, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	697a      	ldr	r2, [r7, #20]
 80003f4:	430a      	orrs	r2, r1
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	e0c8      	b.n	800058c <GPIO_Init+0x1f4>
	}else {
		// the interrupt mode
		if (hGPIO->Init.Mode == GPIO_MODE_IT_FALLING)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	795b      	ldrb	r3, [r3, #5]
 80003fe:	2b04      	cmp	r3, #4
 8000400:	d117      	bne.n	8000432 <GPIO_Init+0x9a>
		{
			// Configure the FTSR
			EXTI->FTSR |= (1 << hGPIO->Init.Pin);
 8000402:	4b49      	ldr	r3, [pc, #292]	@ (8000528 <GPIO_Init+0x190>)
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	7912      	ldrb	r2, [r2, #4]
 800040a:	4611      	mov	r1, r2
 800040c:	2201      	movs	r2, #1
 800040e:	408a      	lsls	r2, r1
 8000410:	4611      	mov	r1, r2
 8000412:	4a45      	ldr	r2, [pc, #276]	@ (8000528 <GPIO_Init+0x190>)
 8000414:	430b      	orrs	r3, r1
 8000416:	60d3      	str	r3, [r2, #12]

			// Clear the corresponding the RTSR
			EXTI->RTSR &= ~(1 << hGPIO->Init.Pin);
 8000418:	4b43      	ldr	r3, [pc, #268]	@ (8000528 <GPIO_Init+0x190>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	7912      	ldrb	r2, [r2, #4]
 8000420:	4611      	mov	r1, r2
 8000422:	2201      	movs	r2, #1
 8000424:	408a      	lsls	r2, r1
 8000426:	43d2      	mvns	r2, r2
 8000428:	4611      	mov	r1, r2
 800042a:	4a3f      	ldr	r2, [pc, #252]	@ (8000528 <GPIO_Init+0x190>)
 800042c:	400b      	ands	r3, r1
 800042e:	6093      	str	r3, [r2, #8]
 8000430:	e031      	b.n	8000496 <GPIO_Init+0xfe>
		}else if (hGPIO->Init.Mode == GPIO_MODE_IT_RISING)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	795b      	ldrb	r3, [r3, #5]
 8000436:	2b05      	cmp	r3, #5
 8000438:	d117      	bne.n	800046a <GPIO_Init+0xd2>
		{
			// Configure the RTSR
			EXTI->RTSR |= (1 << hGPIO->Init.Pin);
 800043a:	4b3b      	ldr	r3, [pc, #236]	@ (8000528 <GPIO_Init+0x190>)
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	7912      	ldrb	r2, [r2, #4]
 8000442:	4611      	mov	r1, r2
 8000444:	2201      	movs	r2, #1
 8000446:	408a      	lsls	r2, r1
 8000448:	4611      	mov	r1, r2
 800044a:	4a37      	ldr	r2, [pc, #220]	@ (8000528 <GPIO_Init+0x190>)
 800044c:	430b      	orrs	r3, r1
 800044e:	6093      	str	r3, [r2, #8]

			// Clear the corresponding the FTSR
			EXTI->FTSR &= ~(1 << hGPIO->Init.Pin);
 8000450:	4b35      	ldr	r3, [pc, #212]	@ (8000528 <GPIO_Init+0x190>)
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	7912      	ldrb	r2, [r2, #4]
 8000458:	4611      	mov	r1, r2
 800045a:	2201      	movs	r2, #1
 800045c:	408a      	lsls	r2, r1
 800045e:	43d2      	mvns	r2, r2
 8000460:	4611      	mov	r1, r2
 8000462:	4a31      	ldr	r2, [pc, #196]	@ (8000528 <GPIO_Init+0x190>)
 8000464:	400b      	ands	r3, r1
 8000466:	60d3      	str	r3, [r2, #12]
 8000468:	e015      	b.n	8000496 <GPIO_Init+0xfe>
		}else {
			// Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << hGPIO->Init.Pin);
 800046a:	4b2f      	ldr	r3, [pc, #188]	@ (8000528 <GPIO_Init+0x190>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	7912      	ldrb	r2, [r2, #4]
 8000472:	4611      	mov	r1, r2
 8000474:	2201      	movs	r2, #1
 8000476:	408a      	lsls	r2, r1
 8000478:	4611      	mov	r1, r2
 800047a:	4a2b      	ldr	r2, [pc, #172]	@ (8000528 <GPIO_Init+0x190>)
 800047c:	430b      	orrs	r3, r1
 800047e:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR |= (1 << hGPIO->Init.Pin);
 8000480:	4b29      	ldr	r3, [pc, #164]	@ (8000528 <GPIO_Init+0x190>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	7912      	ldrb	r2, [r2, #4]
 8000488:	4611      	mov	r1, r2
 800048a:	2201      	movs	r2, #1
 800048c:	408a      	lsls	r2, r1
 800048e:	4611      	mov	r1, r2
 8000490:	4a25      	ldr	r2, [pc, #148]	@ (8000528 <GPIO_Init+0x190>)
 8000492:	430b      	orrs	r3, r1
 8000494:	6093      	str	r3, [r2, #8]
		}
		// Configure the GPIO port selection in SYSCFG_EXTICR
		uint32_t temp1 = hGPIO->Init.Pin / 4;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	791b      	ldrb	r3, [r3, #4]
 800049a:	089b      	lsrs	r3, r3, #2
 800049c:	b2db      	uxtb	r3, r3
 800049e:	613b      	str	r3, [r7, #16]
		uint32_t temp2 = hGPIO->Init.Pin % 4;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	791b      	ldrb	r3, [r3, #4]
 80004a4:	f003 0303 	and.w	r3, r3, #3
 80004a8:	60fb      	str	r3, [r7, #12]
		uint8_t portCode = GPIO_PORTCODE(hGPIO->pGPIOx);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a1f      	ldr	r2, [pc, #124]	@ (800052c <GPIO_Init+0x194>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d04d      	beq.n	8000550 <GPIO_Init+0x1b8>
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000530 <GPIO_Init+0x198>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d032      	beq.n	8000524 <GPIO_Init+0x18c>
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000534 <GPIO_Init+0x19c>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d02b      	beq.n	8000520 <GPIO_Init+0x188>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a1a      	ldr	r2, [pc, #104]	@ (8000538 <GPIO_Init+0x1a0>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d024      	beq.n	800051c <GPIO_Init+0x184>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a19      	ldr	r2, [pc, #100]	@ (800053c <GPIO_Init+0x1a4>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d01d      	beq.n	8000518 <GPIO_Init+0x180>
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a17      	ldr	r2, [pc, #92]	@ (8000540 <GPIO_Init+0x1a8>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d016      	beq.n	8000514 <GPIO_Init+0x17c>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a16      	ldr	r2, [pc, #88]	@ (8000544 <GPIO_Init+0x1ac>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d00f      	beq.n	8000510 <GPIO_Init+0x178>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a14      	ldr	r2, [pc, #80]	@ (8000548 <GPIO_Init+0x1b0>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d008      	beq.n	800050c <GPIO_Init+0x174>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a13      	ldr	r2, [pc, #76]	@ (800054c <GPIO_Init+0x1b4>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d101      	bne.n	8000508 <GPIO_Init+0x170>
 8000504:	2308      	movs	r3, #8
 8000506:	e024      	b.n	8000552 <GPIO_Init+0x1ba>
 8000508:	2300      	movs	r3, #0
 800050a:	e022      	b.n	8000552 <GPIO_Init+0x1ba>
 800050c:	2307      	movs	r3, #7
 800050e:	e020      	b.n	8000552 <GPIO_Init+0x1ba>
 8000510:	2306      	movs	r3, #6
 8000512:	e01e      	b.n	8000552 <GPIO_Init+0x1ba>
 8000514:	2305      	movs	r3, #5
 8000516:	e01c      	b.n	8000552 <GPIO_Init+0x1ba>
 8000518:	2304      	movs	r3, #4
 800051a:	e01a      	b.n	8000552 <GPIO_Init+0x1ba>
 800051c:	2303      	movs	r3, #3
 800051e:	e018      	b.n	8000552 <GPIO_Init+0x1ba>
 8000520:	2302      	movs	r3, #2
 8000522:	e016      	b.n	8000552 <GPIO_Init+0x1ba>
 8000524:	2301      	movs	r3, #1
 8000526:	e014      	b.n	8000552 <GPIO_Init+0x1ba>
 8000528:	40013c00 	.word	0x40013c00
 800052c:	40020000 	.word	0x40020000
 8000530:	40020400 	.word	0x40020400
 8000534:	40020800 	.word	0x40020800
 8000538:	40020c00 	.word	0x40020c00
 800053c:	40021000 	.word	0x40021000
 8000540:	40021400 	.word	0x40021400
 8000544:	40021800 	.word	0x40021800
 8000548:	40021c00 	.word	0x40021c00
 800054c:	40022000 	.word	0x40022000
 8000550:	2300      	movs	r3, #0
 8000552:	72fb      	strb	r3, [r7, #11]
		SYSCFG_CLK_EN();
 8000554:	4b59      	ldr	r3, [pc, #356]	@ (80006bc <GPIO_Init+0x324>)
 8000556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000558:	4a58      	ldr	r2, [pc, #352]	@ (80006bc <GPIO_Init+0x324>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800055e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 8000560:	7afa      	ldrb	r2, [r7, #11]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	4a55      	ldr	r2, [pc, #340]	@ (80006c0 <GPIO_Init+0x328>)
 800056c:	4619      	mov	r1, r3
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	3302      	adds	r3, #2
 8000572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable the EXTI interrupt delivery usig IMR
		EXTI->IMR |= 1 << hGPIO->Init.Pin;
 8000576:	4b53      	ldr	r3, [pc, #332]	@ (80006c4 <GPIO_Init+0x32c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7912      	ldrb	r2, [r2, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	4611      	mov	r1, r2
 8000586:	4a4f      	ldr	r2, [pc, #316]	@ (80006c4 <GPIO_Init+0x32c>)
 8000588:	430b      	orrs	r3, r1
 800058a:	6013      	str	r3, [r2, #0]
	}

	// Step 2: Configure the speed
	tempreg = (hGPIO->Init.Speed << (2 * hGPIO->Init.Pin));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	79db      	ldrb	r3, [r3, #7]
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	617b      	str	r3, [r7, #20]
	hGPIO->pGPIOx->OSPEEDR &= ~(0x3 << (2 * hGPIO->Init.Pin));
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	689a      	ldr	r2, [r3, #8]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	2103      	movs	r1, #3
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	400a      	ands	r2, r1
 80005ba:	609a      	str	r2, [r3, #8]
	hGPIO->pGPIOx->OSPEEDR |= tempreg;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6899      	ldr	r1, [r3, #8]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	430a      	orrs	r2, r1
 80005ca:	609a      	str	r2, [r3, #8]

	// Step 3: Configure the pull settings
	tempreg = (hGPIO->Init.Pull << (2 * hGPIO->Init.Pin));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	799b      	ldrb	r3, [r3, #6]
 80005d0:	461a      	mov	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	617b      	str	r3, [r7, #20]
	hGPIO->pGPIOx->PUPDR &= ~(0x3 << (2 * hGPIO->Init.Pin));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68da      	ldr	r2, [r3, #12]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	2103      	movs	r1, #3
 80005ec:	fa01 f303 	lsl.w	r3, r1, r3
 80005f0:	43db      	mvns	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	400a      	ands	r2, r1
 80005fa:	60da      	str	r2, [r3, #12]
	hGPIO->pGPIOx->PUPDR |= tempreg;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	68d9      	ldr	r1, [r3, #12]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	430a      	orrs	r2, r1
 800060a:	60da      	str	r2, [r3, #12]

	// Step 4: Configure the output type
	tempreg = (hGPIO->Init.OPType << hGPIO->Init.Pin);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7a1b      	ldrb	r3, [r3, #8]
 8000610:	461a      	mov	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	617b      	str	r3, [r7, #20]
	hGPIO->pGPIOx->OTYPER &= ~(0x1 << hGPIO->Init.Pin);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	4619      	mov	r1, r3
 8000628:	2301      	movs	r3, #1
 800062a:	408b      	lsls	r3, r1
 800062c:	43db      	mvns	r3, r3
 800062e:	4619      	mov	r1, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	400a      	ands	r2, r1
 8000636:	605a      	str	r2, [r3, #4]
	hGPIO->pGPIOx->OTYPER |= tempreg;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6859      	ldr	r1, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	430a      	orrs	r2, r1
 8000646:	605a      	str	r2, [r3, #4]

	// Step 5: Configure the alternate function mode
	if (hGPIO->Init.Alternate == GPIO_MODE_ALTERNATE)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7a5b      	ldrb	r3, [r3, #9]
 800064c:	2b02      	cmp	r3, #2
 800064e:	d130      	bne.n	80006b2 <GPIO_Init+0x31a>
	{
		uint8_t value1, value2;

		value1 = hGPIO->Init.Pin / 8;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	72bb      	strb	r3, [r7, #10]
		value2 = hGPIO->Init.Pin * 8;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	727b      	strb	r3, [r7, #9]

		hGPIO->pGPIOx->AFR[value1] &= ~(0xF << (4 * value2));
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	7aba      	ldrb	r2, [r7, #10]
 8000666:	3208      	adds	r2, #8
 8000668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800066c:	7a7b      	ldrb	r3, [r7, #9]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	220f      	movs	r2, #15
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	7aba      	ldrb	r2, [r7, #10]
 8000680:	4001      	ands	r1, r0
 8000682:	3208      	adds	r2, #8
 8000684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hGPIO->pGPIOx->AFR[value1] |= (hGPIO->Init.Alternate << (4 * value2));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	7aba      	ldrb	r2, [r7, #10]
 800068e:	3208      	adds	r2, #8
 8000690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	7a5b      	ldrb	r3, [r3, #9]
 8000698:	461a      	mov	r2, r3
 800069a:	7a7b      	ldrb	r3, [r7, #9]
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	7aba      	ldrb	r2, [r7, #10]
 80006aa:	4301      	orrs	r1, r0
 80006ac:	3208      	adds	r2, #8
 80006ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 80006b2:	bf00      	nop
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40013800 	.word	0x40013800
 80006c4:	40013c00 	.word	0x40013c00

080006c8 <GPIO_WritePin>:
  *            	GPIO_PIN_SET: to set the port pin
  *
  * @retval None
  */
void GPIO_WritePin(GPIO_TypeDef *pGPIOx, uint8_t GPIO_Pin, uint8_t PinState)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]
 80006d4:	4613      	mov	r3, r2
 80006d6:	70bb      	strb	r3, [r7, #2]
	if(PinState == GPIO_PIN_SET)
 80006d8:	78bb      	ldrb	r3, [r7, #2]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d109      	bne.n	80006f2 <GPIO_WritePin+0x2a>
	{
		// Write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= (1 << GPIO_Pin);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	78fa      	ldrb	r2, [r7, #3]
 80006e4:	2101      	movs	r1, #1
 80006e6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ea:	431a      	orrs	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	615a      	str	r2, [r3, #20]
	}else {
		/// Write 0
		pGPIOx->ODR &= ~(1 << GPIO_Pin);
	}
}
 80006f0:	e009      	b.n	8000706 <GPIO_WritePin+0x3e>
		pGPIOx->ODR &= ~(1 << GPIO_Pin);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	78fa      	ldrb	r2, [r7, #3]
 80006f8:	2101      	movs	r1, #1
 80006fa:	fa01 f202 	lsl.w	r2, r1, r2
 80006fe:	43d2      	mvns	r2, r2
 8000700:	401a      	ands	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	615a      	str	r2, [r3, #20]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *
  * @retval None
  */
void GPIO_TogglePin(GPIO_TypeDef *pGPIOx, uint8_t GPIO_Pin)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
 800071a:	460b      	mov	r3, r1
 800071c:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << GPIO_Pin);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	78fa      	ldrb	r2, [r7, #3]
 8000724:	2101      	movs	r1, #1
 8000726:	fa01 f202 	lsl.w	r2, r1, r2
 800072a:	405a      	eors	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	615a      	str	r2, [r3, #20]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <GPIO_IRQInterruptConfig>:
  * @param  State ENABLE or DISABLE.
  *
  * @retval None
  */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t State)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	460a      	mov	r2, r1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
	if (State == ENABLE)
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d133      	bne.n	80007ba <GPIO_IRQInterruptConfig+0x7e>
	{
		if (IRQNumber <= 31)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b1f      	cmp	r3, #31
 8000756:	d80a      	bhi.n	800076e <GPIO_IRQInterruptConfig+0x32>
		{
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000758:	4b35      	ldr	r3, [pc, #212]	@ (8000830 <GPIO_IRQInterruptConfig+0xf4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	79fa      	ldrb	r2, [r7, #7]
 800075e:	2101      	movs	r1, #1
 8000760:	fa01 f202 	lsl.w	r2, r1, r2
 8000764:	4611      	mov	r1, r2
 8000766:	4a32      	ldr	r2, [pc, #200]	@ (8000830 <GPIO_IRQInterruptConfig+0xf4>)
 8000768:	430b      	orrs	r3, r1
 800076a:	6013      	str	r3, [r2, #0]
		}else if (IRQNumber >= 64 && IRQNumber < 96)
		{
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 800076c:	e059      	b.n	8000822 <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber > 31 && IRQNumber < 64)
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b1f      	cmp	r3, #31
 8000772:	d90f      	bls.n	8000794 <GPIO_IRQInterruptConfig+0x58>
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b3f      	cmp	r3, #63	@ 0x3f
 8000778:	d80c      	bhi.n	8000794 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800077a:	4b2e      	ldr	r3, [pc, #184]	@ (8000834 <GPIO_IRQInterruptConfig+0xf8>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	79fa      	ldrb	r2, [r7, #7]
 8000780:	f002 021f 	and.w	r2, r2, #31
 8000784:	2101      	movs	r1, #1
 8000786:	fa01 f202 	lsl.w	r2, r1, r2
 800078a:	4611      	mov	r1, r2
 800078c:	4a29      	ldr	r2, [pc, #164]	@ (8000834 <GPIO_IRQInterruptConfig+0xf8>)
 800078e:	430b      	orrs	r3, r1
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	e046      	b.n	8000822 <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >= 64 && IRQNumber < 96)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	2b3f      	cmp	r3, #63	@ 0x3f
 8000798:	d943      	bls.n	8000822 <GPIO_IRQInterruptConfig+0xe6>
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b5f      	cmp	r3, #95	@ 0x5f
 800079e:	d840      	bhi.n	8000822 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80007a0:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <GPIO_IRQInterruptConfig+0xfc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	79fa      	ldrb	r2, [r7, #7]
 80007a6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80007aa:	2101      	movs	r1, #1
 80007ac:	fa01 f202 	lsl.w	r2, r1, r2
 80007b0:	4611      	mov	r1, r2
 80007b2:	4a21      	ldr	r2, [pc, #132]	@ (8000838 <GPIO_IRQInterruptConfig+0xfc>)
 80007b4:	430b      	orrs	r3, r1
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	e033      	b.n	8000822 <GPIO_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31)
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2b1f      	cmp	r3, #31
 80007be:	d80a      	bhi.n	80007d6 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80007c0:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <GPIO_IRQInterruptConfig+0x100>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	79fa      	ldrb	r2, [r7, #7]
 80007c6:	2101      	movs	r1, #1
 80007c8:	fa01 f202 	lsl.w	r2, r1, r2
 80007cc:	4611      	mov	r1, r2
 80007ce:	4a1b      	ldr	r2, [pc, #108]	@ (800083c <GPIO_IRQInterruptConfig+0x100>)
 80007d0:	430b      	orrs	r3, r1
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	e025      	b.n	8000822 <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber > 31 && IRQNumber < 64)
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b1f      	cmp	r3, #31
 80007da:	d90f      	bls.n	80007fc <GPIO_IRQInterruptConfig+0xc0>
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b3f      	cmp	r3, #63	@ 0x3f
 80007e0:	d80c      	bhi.n	80007fc <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80007e2:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <GPIO_IRQInterruptConfig+0x104>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	79fa      	ldrb	r2, [r7, #7]
 80007e8:	f002 021f 	and.w	r2, r2, #31
 80007ec:	2101      	movs	r1, #1
 80007ee:	fa01 f202 	lsl.w	r2, r1, r2
 80007f2:	4611      	mov	r1, r2
 80007f4:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <GPIO_IRQInterruptConfig+0x104>)
 80007f6:	430b      	orrs	r3, r1
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	e012      	b.n	8000822 <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >= 64 && IRQNumber < 96)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000800:	d90f      	bls.n	8000822 <GPIO_IRQInterruptConfig+0xe6>
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b5f      	cmp	r3, #95	@ 0x5f
 8000806:	d80c      	bhi.n	8000822 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000808:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <GPIO_IRQInterruptConfig+0x108>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	79fa      	ldrb	r2, [r7, #7]
 800080e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000812:	2101      	movs	r1, #1
 8000814:	fa01 f202 	lsl.w	r2, r1, r2
 8000818:	4611      	mov	r1, r2
 800081a:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <GPIO_IRQInterruptConfig+0x108>)
 800081c:	430b      	orrs	r3, r1
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	e7ff      	b.n	8000822 <GPIO_IRQInterruptConfig+0xe6>
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000e100 	.word	0xe000e100
 8000834:	e000e104 	.word	0xe000e104
 8000838:	e000e108 	.word	0xe000e108
 800083c:	e000e180 	.word	0xe000e180
 8000840:	e000e184 	.word	0xe000e184
 8000844:	e000e188 	.word	0xe000e188

08000848 <GPIO_IRQPriorityConfig>:
  * @param  IRQPriority Priority level (0 = highest, larger = lower priority).
  *
  * @retval None
  */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
	// Each NVIC_IPR register holds 4 IRQs, and each priority field is 8 bits wide (only top bits used)
	uint8_t ipr_index = IRQNumber / 4; // Which IPR register
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	089b      	lsrs	r3, r3, #2
 8000858:	73fb      	strb	r3, [r7, #15]
	uint8_t ipr_section = IRQNumber % 4; // Which section inside the IPR register
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f003 0303 	and.w	r3, r3, #3
 8000860:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * ipr_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000862:	7bbb      	ldrb	r3, [r7, #14]
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	b2db      	uxtb	r3, r3
 8000868:	3304      	adds	r3, #4
 800086a:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE + ipr_index) |= (IRQPriority << shift_amount);
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000874:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000878:	6819      	ldr	r1, [r3, #0]
 800087a:	7b7b      	ldrb	r3, [r7, #13]
 800087c:	683a      	ldr	r2, [r7, #0]
 800087e:	409a      	lsls	r2, r3
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000888:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800088c:	430a      	orrs	r2, r1
 800088e:	601a      	str	r2, [r3, #0]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <GPIO_IRQHandler>:
  * @param  GPIO_Pin The pin number (0 to 15) that triggered the interrupt.
  *
  * @retval None
  */
void GPIO_IRQHandler(uint8_t GPIO_Pin)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	if (EXTI->PR & (1 << GPIO_Pin))
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <GPIO_IRQHandler+0x3c>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	79fa      	ldrb	r2, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	fa01 f202 	lsl.w	r2, r1, r2
 80008b2:	4013      	ands	r3, r2
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d009      	beq.n	80008cc <GPIO_IRQHandler+0x30>
	{
		// clear the interrupt pening bit by writting 1
		EXTI->PR |= (1 << GPIO_Pin);
 80008b8:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <GPIO_IRQHandler+0x3c>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	79fa      	ldrb	r2, [r7, #7]
 80008be:	2101      	movs	r1, #1
 80008c0:	fa01 f202 	lsl.w	r2, r1, r2
 80008c4:	4611      	mov	r1, r2
 80008c6:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <GPIO_IRQHandler+0x3c>)
 80008c8:	430b      	orrs	r3, r1
 80008ca:	6153      	str	r3, [r2, #20]
	}
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	40013c00 	.word	0x40013c00

080008dc <delay>:

#include "stm32f407xx.h"
#include "string.h"
#define BTN_PRESSED  1
void delay(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
    for(uint32_t i = 0 ; i < 500000 / 2; i ++);
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	e002      	b.n	80008ee <delay+0x12>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3301      	adds	r3, #1
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a04      	ldr	r2, [pc, #16]	@ (8000904 <delay+0x28>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d9f8      	bls.n	80008e8 <delay+0xc>
}
 80008f6:	bf00      	nop
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	0003d08f 	.word	0x0003d08f

08000908 <main>:

int main(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0

    GPIO_HandleTypeDef GpioLed, GPIOBtn;
    memset(&GpioLed,0,sizeof(GpioLed));
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	220c      	movs	r2, #12
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f86f 	bl	80009fa <memset>
    memset(&GPIOBtn,0,sizeof(GPIOBtn));
 800091c:	463b      	mov	r3, r7
 800091e:	220c      	movs	r2, #12
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f869 	bl	80009fa <memset>

    GpioLed.pGPIOx = GPIOD;
 8000928:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <main+0x78>)
 800092a:	60fb      	str	r3, [r7, #12]
    GpioLed.Init.Pin = GPIO_PIN_13;
 800092c:	230d      	movs	r3, #13
 800092e:	743b      	strb	r3, [r7, #16]
    GpioLed.Init.Mode = GPIO_MODE_OUTPUT;
 8000930:	2301      	movs	r3, #1
 8000932:	747b      	strb	r3, [r7, #17]
    GpioLed.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000934:	2302      	movs	r3, #2
 8000936:	74fb      	strb	r3, [r7, #19]
    GpioLed.Init.OPType = GPIO_OUTPUT_TYPE_PP;
 8000938:	2300      	movs	r3, #0
 800093a:	753b      	strb	r3, [r7, #20]
    GpioLed.Init.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	74bb      	strb	r3, [r7, #18]

    GPIO_Init(&GpioLed);
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fd27 	bl	8000398 <GPIO_Init>

    // this is btn gpio configuration
    GPIOBtn.pGPIOx = GPIOA;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <main+0x7c>)
 800094c:	603b      	str	r3, [r7, #0]
    GPIOBtn.Init.Pin = GPIO_PIN_0;
 800094e:	2300      	movs	r3, #0
 8000950:	713b      	strb	r3, [r7, #4]
    GPIOBtn.Init.Mode = GPIO_MODE_IT_RISING;
 8000952:	2305      	movs	r3, #5
 8000954:	717b      	strb	r3, [r7, #5]
    GPIOBtn.Init.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	71bb      	strb	r3, [r7, #6]

    GPIO_Init(&GPIOBtn);
 800095a:	463b      	mov	r3, r7
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fd1b 	bl	8000398 <GPIO_Init>
    GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	210c      	movs	r1, #12
 8000966:	4806      	ldr	r0, [pc, #24]	@ (8000980 <main+0x78>)
 8000968:	f7ff feae 	bl	80006c8 <GPIO_WritePin>

    //IRQ configurations
    GPIO_IRQPriorityConfig(EXTI0_IRQn, IRQ_PRIORITY_15);
 800096c:	210f      	movs	r1, #15
 800096e:	2006      	movs	r0, #6
 8000970:	f7ff ff6a 	bl	8000848 <GPIO_IRQPriorityConfig>
    GPIO_IRQInterruptConfig(EXTI0_IRQn, ENABLE);
 8000974:	2101      	movs	r1, #1
 8000976:	2006      	movs	r0, #6
 8000978:	f7ff fee0 	bl	800073c <GPIO_IRQInterruptConfig>
    while(1);
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <main+0x74>
 8000980:	40020c00 	.word	0x40020c00
 8000984:	40020000 	.word	0x40020000

08000988 <EXTI0_IRQHandler>:
    return 0;
}

void EXTI0_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	delay();
 800098c:	f7ff ffa6 	bl	80008dc <delay>
	GPIO_IRQHandler(GPIO_PIN_0);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff ff83 	bl	800089c <GPIO_IRQHandler>
	GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000996:	210d      	movs	r1, #13
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <EXTI0_IRQHandler+0x1c>)
 800099a:	f7ff feba 	bl	8000712 <GPIO_TogglePin>
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40020c00 	.word	0x40020c00

080009a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a8:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	@ (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	@ (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009d6:	f000 f819 	bl	8000a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff ff95 	bl	8000908 <main>

080009de <LoopForever>:

LoopForever:
  b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   r0, =_estack
 80009e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009ec:	08000a74 	.word	0x08000a74
  ldr r2, =_sbss
 80009f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009f4:	2000001c 	.word	0x2000001c

080009f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>

080009fa <memset>:
 80009fa:	4402      	add	r2, r0
 80009fc:	4603      	mov	r3, r0
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d100      	bne.n	8000a04 <memset+0xa>
 8000a02:	4770      	bx	lr
 8000a04:	f803 1b01 	strb.w	r1, [r3], #1
 8000a08:	e7f9      	b.n	80009fe <memset+0x4>
	...

08000a0c <__libc_init_array>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8000a44 <__libc_init_array+0x38>)
 8000a10:	4c0d      	ldr	r4, [pc, #52]	@ (8000a48 <__libc_init_array+0x3c>)
 8000a12:	1b64      	subs	r4, r4, r5
 8000a14:	10a4      	asrs	r4, r4, #2
 8000a16:	2600      	movs	r6, #0
 8000a18:	42a6      	cmp	r6, r4
 8000a1a:	d109      	bne.n	8000a30 <__libc_init_array+0x24>
 8000a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8000a4c <__libc_init_array+0x40>)
 8000a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8000a50 <__libc_init_array+0x44>)
 8000a20:	f000 f818 	bl	8000a54 <_init>
 8000a24:	1b64      	subs	r4, r4, r5
 8000a26:	10a4      	asrs	r4, r4, #2
 8000a28:	2600      	movs	r6, #0
 8000a2a:	42a6      	cmp	r6, r4
 8000a2c:	d105      	bne.n	8000a3a <__libc_init_array+0x2e>
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a34:	4798      	blx	r3
 8000a36:	3601      	adds	r6, #1
 8000a38:	e7ee      	b.n	8000a18 <__libc_init_array+0xc>
 8000a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3e:	4798      	blx	r3
 8000a40:	3601      	adds	r6, #1
 8000a42:	e7f2      	b.n	8000a2a <__libc_init_array+0x1e>
 8000a44:	08000a6c 	.word	0x08000a6c
 8000a48:	08000a6c 	.word	0x08000a6c
 8000a4c:	08000a6c 	.word	0x08000a6c
 8000a50:	08000a70 	.word	0x08000a70

08000a54 <_init>:
 8000a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a56:	bf00      	nop
 8000a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5a:	bc08      	pop	{r3}
 8000a5c:	469e      	mov	lr, r3
 8000a5e:	4770      	bx	lr

08000a60 <_fini>:
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a62:	bf00      	nop
 8000a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a66:	bc08      	pop	{r3}
 8000a68:	469e      	mov	lr, r3
 8000a6a:	4770      	bx	lr
